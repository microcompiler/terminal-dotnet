using System;

using Bytewizer.TinyCLR.Numerics;
using Bytewizer.TinyCLR.Security.Cryptography;

namespace Bytewizer.TinyCLR.SecureShell.Algorithms
{
    public class DiffieHellman : AsymmetricAlgorithm
    {
        private static readonly RandomNumberGenerator _rng = RandomNumberGenerator.Create();

        private static readonly byte[] Okley1024 =
        {
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x53, 0xe6, 0xec,
                0x51, 0x66, 0x28, 0x49, 0xe6, 0x1f, 0x4b, 0x7c, 0x11, 0x24, 0x9f, 0xae,
                0xa5, 0x9f, 0x89, 0x5a, 0xfb, 0x6b, 0x38, 0xee, 0xed, 0xb7, 0x06, 0xf4,
                0xb6, 0x5c, 0xff, 0x0b, 0x6b, 0xed, 0x37, 0xa6, 0xe9, 0x42, 0x4c, 0xf4,
                0xc6, 0x7e, 0x5e, 0x62, 0x76, 0xb5, 0x85, 0xe4, 0x45, 0xc2, 0x51, 0x6d,
                0x6d, 0x35, 0xe1, 0x4f, 0x37, 0x14, 0x5f, 0xf2, 0x6d, 0x0a, 0x2b, 0x30,
                0x1b, 0x43, 0x3a, 0xcd, 0xb3, 0x19, 0x95, 0xef, 0xdd, 0x04, 0x34, 0x8e,
                0x79, 0x08, 0x4a, 0x51, 0x22, 0x9b, 0x13, 0x3b, 0xa6, 0xbe, 0x0b, 0x02,
                0x74, 0xcc, 0x67, 0x8a, 0x08, 0x4e, 0x02, 0x29, 0xd1, 0x1c, 0xdc, 0x80,
                0x8b, 0x62, 0xc6, 0xc4, 0x34, 0xc2, 0x68, 0x21, 0xa2, 0xda, 0x0f, 0xc9,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x00
        };

        private static readonly byte[] Okley2048 =
        {
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0xaa, 0xac, 0x8a,
                0x5a, 0x8e, 0x72, 0x15, 0x10, 0x05, 0xfa, 0x98, 0x18, 0x26, 0xd2, 0x15,
                0xe5, 0x6a, 0x95, 0xea, 0x7c, 0x49, 0x95, 0x39, 0x18, 0x17, 0x58, 0x95,
                0xf6, 0xcb, 0x2b, 0xde, 0xc9, 0x52, 0x4c, 0x6f, 0xf0, 0x5d, 0xc5, 0xb5,
                0x8f, 0xa2, 0x07, 0xec, 0xa2, 0x83, 0x27, 0x9b, 0x03, 0x86, 0x0e, 0x18,
                0x2c, 0x77, 0x9e, 0xe3, 0x3b, 0xce, 0x36, 0x2e, 0x46, 0x5e, 0x90, 0x32,
                0x7c, 0x21, 0x18, 0xca, 0x08, 0x6c, 0x74, 0xf1, 0x04, 0x98, 0xbc, 0x4a,
                0x4e, 0x35, 0x0c, 0x67, 0x6d, 0x96, 0x96, 0x70, 0x07, 0x29, 0xd5, 0x9e,
                0xbb, 0x52, 0x85, 0x20, 0x56, 0xf3, 0x62, 0x1c, 0x96, 0xad, 0xa3, 0xdc,
                0x23, 0x5d, 0x65, 0x83, 0x5f, 0xcf, 0x24, 0xfd, 0xa8, 0x3f, 0x16, 0x69,
                0x9a, 0xd3, 0x55, 0x1c, 0x36, 0x48, 0xda, 0x98, 0x05, 0xbf, 0x63, 0xa1,
                0xb8, 0x7c, 0x00, 0xc2, 0x3d, 0x5b, 0xe4, 0xec, 0x51, 0x66, 0x28, 0x49,
                0xe6, 0x1f, 0x4b, 0x7c, 0x11, 0x24, 0x9f, 0xae, 0xa5, 0x9f, 0x89, 0x5a,
                0xfb, 0x6b, 0x38, 0xee, 0xed, 0xb7, 0x06, 0xf4, 0xb6, 0x5c, 0xff, 0x0b,
                0x6b, 0xed, 0x37, 0xa6, 0xe9, 0x42, 0x4c, 0xf4, 0xc6, 0x7e, 0x5e, 0x62,
                0x76, 0xb5, 0x85, 0xe4, 0x45, 0xc2, 0x51, 0x6d, 0x6d, 0x35, 0xe1, 0x4f,
                0x37, 0x14, 0x5f, 0xf2, 0x6d, 0x0a, 0x2b, 0x30, 0x1b, 0x43, 0x3a, 0xcd,
                0xb3, 0x19, 0x95, 0xef, 0xdd, 0x04, 0x34, 0x8e, 0x79, 0x08, 0x4a, 0x51,
                0x22, 0x9b, 0x13, 0x3b, 0xa6, 0xbe, 0x0b, 0x02, 0x74, 0xcc, 0x67, 0x8a,
                0x08, 0x4e, 0x02, 0x29, 0xd1, 0x1c, 0xdc, 0x80, 0x8b, 0x62, 0xc6, 0xc4,
                0x34, 0xc2, 0x68, 0x21, 0xa2, 0xda, 0x0f, 0xc9, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff,
                0x00
        };

        private BigInteger _p;
        private BigInteger _g;
        private BigInteger _x;

        public DiffieHellman(int bitlen)
        {
            if (bitlen == 1024)
            {
                _p = new BigInteger(Okley1024);
                _g = new BigInteger(2);
            }
            else if (bitlen == 2048)
            {
                _p = new BigInteger(Okley2048);
                _g = new BigInteger(2);
            }
            else
            {
                throw new ArgumentException("bitlen", "bitlen must equal 1024 or 2048");
            }

            var bytes = new byte[80]; // 80 * 8 = 640 bits
            _rng.GetBytes(bytes);
            _x = BigInteger.Abs(new BigInteger(bytes));
        }

        public byte[] CreateKeyExchange()
        {
            var y = BigInteger.ModPow(_g, _x, _p);
            var bytes = BigIntegerToBytes(y);
            return bytes;
        }

        public byte[] DecryptKeyExchange(byte[] keyEx)
        {
            if (keyEx == null)
            {
                throw new ArgumentNullException(nameof(keyEx));
            }

            var pvr = BytesToBigInteger(keyEx);
            var z = BigInteger.ModPow(pvr, _x, _p);
            var bytes = BigIntegerToBytes(z);
            return bytes;
        }

        private static BigInteger BytesToBigInteger(byte[] bytes)
        {
            // Reverse bytes and add an empty byte on to end
            var buffer = new byte[bytes.Length + 1];
            Array.Copy(bytes, buffer, bytes.Length);

            int j = buffer.Length - 2;
            for (int i = 0; i < j; i++, j--)
            {
                byte z = buffer[i];
                buffer[i] = buffer[j];
                buffer[j] = z;
            }

            return new BigInteger(buffer);
        }

        private static byte[] BigIntegerToBytes(BigInteger bigint)
        {
            var bytes = bigint.ToByteArray();

            if (bytes.Length > 1 && bytes[bytes.Length - 1] == 0)
            {
                int j = bytes.Length - 1;
                for (int i = 0; i < j; i++, j--)
                {
                    byte z = bytes[i];
                    bytes[i] = bytes[j];
                    bytes[j] = z;
                }

                var buffer = new byte[bytes.Length - 1];
                Array.Copy(bytes, 1, buffer, 0, bytes.Length - 1);

                return buffer;
            }
            else
            {
                int j = bytes.Length - 1;
                for (int i = 0; i < j; i++, j--)
                {
                    byte z = bytes[i];
                    bytes[i] = bytes[j];
                    bytes[j] = z;
                }

                return bytes;
            }
        }

        //private BigInteger BytesToBigint(byte[] bytes)
        //{
        //    return new BigInteger(bytes.Reverse().Concat(new byte[] { 0 }).ToArray());
        //}

        //private byte[] BigintToBytes(BigInteger bigint)
        //{
        //    var bytes = bigint.ToByteArray();
        //    if (bytes.Length > 1 && bytes[bytes.Length - 1] == 0)
        //    {
        //        return bytes.Reverse().Skip(1).ToArray();
        //    }
        //    return bytes.Reverse().ToArray();
        //}
    }
}
